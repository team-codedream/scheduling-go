const pool = require('../utils/dbPool');

/**
 * UserRow: represents a single record from the 'users' table in the database.
 * It includes all columns stored in the table.
 * @typedef {Object} UserRow
 * @property {number} id             - Auto-generated primary key
 * @property {string} email         - User's email address
 * @property {string} nickname      - User's display name
 * @property {string} pw            - User's hashed password
 * @property {string} phone         - User's contact number
 */

/**
 * EventRow: represents a single record from the 'events' table in the database.
 * It includes all columns stored in the table.
 * @typedef {Object} EventRow
 * @property {number} id             - Auto-generated primary key
 * @property {number} userId         - ID of the user who owns the event
 * @property {number} calendarId     - Identifier for the calendar
 * @property {string} title          - Event title
 * @property {string} start          - ISO timestamp of event start
 * @property {string} end            - ISO timestamp of event end
 * @property {string} description    - Event details
 * @property {string} bgcolor        - Hex color code for event display
 */

/**
 * Insert a new user and return the created record including generated id.
 * @param {{ email: string, nickname: string, pw: string, phone: string }} data
 * @returns {Promise<UserRow>}
 */
async function createUser(data) {

  // [!REQUIRED!] search a newly created record with insertId after INSERT
  // [NOTE] result.insertId is the ID of the newly created record,
  // automatically generated by the database
  
  // This is a sample code
  // const { email, nickname, pw, phone } = data;
  // const [result] = await pool.query(
  //   'INSERT INTO users (email, nickname, pw, phone) VALUES (?, ?, ?, ?)',
  //   [email, nickname, pw, phone]
  // );
  // const [rows] = await pool.query(
  //   'SELECT * FROM users WHERE id = ?', 
  //   [result.insertId]
  // );
  // return rows[0];
}

/**
 * Find a user by email.
 * @param {string} email
 * @returns {Promise<UserRow|null>}  Resolves with user row or null if not found
 */
async function getByEmail(email) {

  // This is a sample code
  // const [rows] = await pool.query(
  //   'SELECT * FROM users WHERE email = ?', [email]
  // );
  // return rows[0] || null;
}

/**
 * Retrieve all users.
 * @returns {Promise<UserRow[]>}  Array of user rows
 */
async function getAllUsers() {
  // This is a sample code
  // const [users] = await pool.query('SELECT * FROM users');
  // return users;
}

/**
 * Find a user by their unique ID.
 * @param {number} id
 * @returns {Promise<UserRow|null>}  Resolves with the user row or null if not found
 */
async function getById(id) {
  // This is a sample code!
  // const [rows] = await pool.query(
  //   'SELECT * FROM users WHERE id = ?', [id]
  // );
  // return rows[0] || null;
}

/**
 * Get all events associated with a specific user.
 * @param {number} userId
 * @returns {Promise<EventRow[]>}  Array of event rows
 */
async function getUserEvents(userId) {
  // This is a sample code
  // const [events] = await pool.query(
  //   'SELECT * FROM events WHERE userId = ?', [userId]
  // );
  // return events;
}

module.exports = {
  createUser,
  getByEmail,
  getAllUsers,
  getById,
  getUserEvents
};